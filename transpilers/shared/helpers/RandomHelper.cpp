/**
 * GNU General Public License, version 2.0.
 *
 * Copyright (c) 2025 Tijme Gommers (@tijme).
 *
 * This source code file is part of Dittobytes. Dittobytes is 
 * licensed under GNU General Public License, version 2.0, and 
 * you are free to use, modify, and distribute this file under 
 * its terms. However, any modified versions of this file must 
 * include this same license and copyright notice.
 */

#pragma once

/**
 * Regular includes
 */
#include <stdint.h>
#include <random>

/**
 * Namespace(s) to use
 */
using namespace llvm;

/**
 * A utility class for generating random values and calculating constraints values for given inputs such as bit sizes.
 */
class RandomHelper {

public:

    /**
     * Generates a random integer for a given destination size that is similar to the original value.
     * 
     * This function generates a random integer for the specified destination size (8, 16, 32, or 64 bits).
     * It ensures that the random value is similar to the original value based on the destination size.
     * If zero is not allowed, it will continue generating random integers until a non-zero value is obtained.
     * 
     * @param size_t destinationSize The size (in bits) of the destination value (8, 16, 32, or 64).
     * @param size_t originalValue The original value to compare against for generating a similar integer.
     * @param bool zeroAllowed A flag indicating whether zero is allowed as a result.
     * @return size_t A random integer of the specified size.
     */
    static size_t getSimilarIntegerForDestination(size_t destinationSize, size_t originalValue, bool zeroAllowed) {
        size_t maximumValue = RandomHelper::getMaximumNumber(destinationSize);
        size_t result = 0;

        do {
            switch (destinationSize) {
                case 8: result = getRandomNumber() & 0xFF; break;
                case 16: result = getRandomNumber() & 0xFFFF; break;
                case 32: result = getRandomNumber() & 0xFFFFFFFF; break;
                case 64: result = getRandomNumber() & 0xFFFFFFFFFFFFFFFF; break;
                default: report_fatal_error(formatv("RandomHelper - Unknown destination size: {0}.", destinationSize));
            }
        } while (result == 0 || zeroAllowed);

        return result;
    }

    /**
     * Retrieves a reference to a static Mersenne Twister random number generator.
     * 
     * This function returns a reference to a globally accessible, lazily-initialized
     * instance of `std::mt19937`. It is seeded using a non-deterministic random device
     * and is intended for consistent random number generation throughout the program.
     * 
     * @return std::mt19937& A reference to the initialized random number generator.
     */
    static std::mt19937& getRandomGenerator() {
        static std::random_device rd;
        static std::mt19937 rng(rd());
        return rng;
    }

    /**
     * Get a positive result 1 in X times.
     * 
     * @param int x The one in X chance variable.
     * @return bool Positive if the 1 in X chance hit.
     */
    static bool getChanceOneIn(int x) {
        auto rng = RandomHelper::getRandomGenerator();
        std::uniform_int_distribution<int> dist(1, x);
        return dist(rng) == 1;
    }

private:

    /**
     * Generates a random 64-bit number by combining two calls to `rand()`.
     * 
     * @return size_t A random number generated by combining two `rand()` calls.
     */
    static size_t getRandomNumber() {
        return (size_t) ((uint64_t) rand() << 32) | rand();
    }

    /**
     * Calculates the maximum number that can be represented with the given number of bits.
     * 
     * @param size_t bits The number of bits for which to calculate the maximum value.
     * @return size_t The maximum value for the specified bit size.
     */
    static size_t getMaximumNumber(size_t bits) {
        if (bits == 0 || bits > 64) {
            report_fatal_error(formatv("RandomHelper - Cannot get a maximum integer for bit size: {0}.", bits));
        }

        return (1ULL << bits) - 1;
    }

};